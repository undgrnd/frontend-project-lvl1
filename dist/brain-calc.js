"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _readlineSync = _interopRequireDefault(require("readline-sync"));

var _brainGames = require("./brain-games");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var RULES_DESCRIPTION = 'What is the result of the expression?';
var OPERATIONS_OF_QUESTION = ['+', '-', '*'];

var getRandomNumber = function getRandomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

var getRandomItemFromArray = function getRandomItemFromArray(array) {
  return array[Math.floor(Math.random() * array.length)];
};

var askQuestion = function askQuestion() {
  var number1 = getRandomNumber(1, 10);
  var number2 = getRandomNumber(1, 10);
  var operationOfQuestion = getRandomItemFromArray(OPERATIONS_OF_QUESTION);
  var correctAnswer;

  if (operationOfQuestion === '+') {
    correctAnswer = number1 + number2;
  } else if (operationOfQuestion === '-') {
    correctAnswer = number1 - number2;
  } else if (operationOfQuestion === '*') {
    correctAnswer = number1 * number2;
  }

  var userAnswer = parseInt(_readlineSync["default"].question("Question: ".concat(number1, " ").concat(operationOfQuestion, " ").concat(number2, " ")), 10);
  var isUserRight = correctAnswer === userAnswer;
  var pointForQuestion = isUserRight ? 1 : NaN;

  if (isUserRight) {
    console.log('Correct!');
  } else {
    console.log("".concat(userAnswer, " is wrong answer ;(. Correct answer was ").concat(correctAnswer, "."));
  }

  return pointForQuestion;
};

var getResultOfGame = function getResultOfGame() {
  var count = 0;
  var isGameContinue = true;

  while (isGameContinue) {
    count += askQuestion();
    isGameContinue = count < 3 && !Number.isNaN(count);
  }

  return count === 3;
};

var play = function play() {
  (0, _brainGames.saluteUser)();
  console.log(RULES_DESCRIPTION);
  var userName = (0, _brainGames.getUserName)();
  var gameResult = getResultOfGame();

  if (gameResult) {
    console.log("Congratulations, ".concat(userName, "!"));
  }
};

var _default = play;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9icmFpbi1jYWxjLmpzIl0sIm5hbWVzIjpbIlJVTEVTX0RFU0NSSVBUSU9OIiwiT1BFUkFUSU9OU19PRl9RVUVTVElPTiIsImdldFJhbmRvbU51bWJlciIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImdldFJhbmRvbUl0ZW1Gcm9tQXJyYXkiLCJhcnJheSIsImxlbmd0aCIsImFza1F1ZXN0aW9uIiwibnVtYmVyMSIsIm51bWJlcjIiLCJvcGVyYXRpb25PZlF1ZXN0aW9uIiwiY29ycmVjdEFuc3dlciIsInVzZXJBbnN3ZXIiLCJwYXJzZUludCIsInJlYWRsaW5lU3luYyIsInF1ZXN0aW9uIiwiaXNVc2VyUmlnaHQiLCJwb2ludEZvclF1ZXN0aW9uIiwiTmFOIiwiY29uc29sZSIsImxvZyIsImdldFJlc3VsdE9mR2FtZSIsImNvdW50IiwiaXNHYW1lQ29udGludWUiLCJOdW1iZXIiLCJpc05hTiIsInBsYXkiLCJ1c2VyTmFtZSIsImdhbWVSZXN1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLElBQU1BLGlCQUFpQixHQUFHLHVDQUExQjtBQUNBLElBQU1DLHNCQUFzQixHQUFHLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBQS9COztBQUVBLElBQU1DLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOO0FBQUEsU0FBY0MsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxNQUFpQkgsR0FBRyxHQUFHRCxHQUFOLEdBQVksQ0FBN0IsQ0FBWCxJQUE4Q0EsR0FBNUQ7QUFBQSxDQUF4Qjs7QUFDQSxJQUFNSyxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLENBQUNDLEtBQUQ7QUFBQSxTQUFXQSxLQUFLLENBQUNKLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JFLEtBQUssQ0FBQ0MsTUFBakMsQ0FBRCxDQUFoQjtBQUFBLENBQS9COztBQUVBLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLEdBQU07QUFDeEIsTUFBTUMsT0FBTyxHQUFHVixlQUFlLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FBL0I7QUFDQSxNQUFNVyxPQUFPLEdBQUdYLGVBQWUsQ0FBQyxDQUFELEVBQUksRUFBSixDQUEvQjtBQUNBLE1BQU1ZLG1CQUFtQixHQUFHTixzQkFBc0IsQ0FBQ1Asc0JBQUQsQ0FBbEQ7QUFFQSxNQUFJYyxhQUFKOztBQUNBLE1BQUlELG1CQUFtQixLQUFLLEdBQTVCLEVBQWlDO0FBQy9CQyxJQUFBQSxhQUFhLEdBQUdILE9BQU8sR0FBR0MsT0FBMUI7QUFDRCxHQUZELE1BRU8sSUFBSUMsbUJBQW1CLEtBQUssR0FBNUIsRUFBaUM7QUFDdENDLElBQUFBLGFBQWEsR0FBR0gsT0FBTyxHQUFHQyxPQUExQjtBQUNELEdBRk0sTUFFQSxJQUFJQyxtQkFBbUIsS0FBSyxHQUE1QixFQUFpQztBQUN0Q0MsSUFBQUEsYUFBYSxHQUFHSCxPQUFPLEdBQUdDLE9BQTFCO0FBQ0Q7O0FBRUQsTUFBTUcsVUFBVSxHQUFHQyxRQUFRLENBQUNDLHlCQUFhQyxRQUFiLHFCQUFtQ1AsT0FBbkMsY0FBOENFLG1CQUE5QyxjQUFxRUQsT0FBckUsT0FBRCxFQUFtRixFQUFuRixDQUEzQjtBQUNBLE1BQU1PLFdBQVcsR0FBR0wsYUFBYSxLQUFLQyxVQUF0QztBQUNBLE1BQU1LLGdCQUFnQixHQUFHRCxXQUFXLEdBQUcsQ0FBSCxHQUFPRSxHQUEzQzs7QUFFQSxNQUFJRixXQUFKLEVBQWlCO0FBQ2ZHLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFVBQVo7QUFDRCxHQUZELE1BRU87QUFDTEQsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLFdBQWVSLFVBQWYscURBQW9FRCxhQUFwRTtBQUNEOztBQUNELFNBQU9NLGdCQUFQO0FBQ0QsQ0F4QkQ7O0FBMEJBLElBQU1JLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsR0FBTTtBQUM1QixNQUFJQyxLQUFLLEdBQUcsQ0FBWjtBQUNBLE1BQUlDLGNBQWMsR0FBRyxJQUFyQjs7QUFFQSxTQUFPQSxjQUFQLEVBQXVCO0FBQ3JCRCxJQUFBQSxLQUFLLElBQUlmLFdBQVcsRUFBcEI7QUFDQWdCLElBQUFBLGNBQWMsR0FBR0QsS0FBSyxHQUFHLENBQVIsSUFBYSxDQUFDRSxNQUFNLENBQUNDLEtBQVAsQ0FBYUgsS0FBYixDQUEvQjtBQUNEOztBQUVELFNBQU9BLEtBQUssS0FBSyxDQUFqQjtBQUNELENBVkQ7O0FBWUEsSUFBTUksSUFBSSxHQUFHLFNBQVBBLElBQU8sR0FBTTtBQUNqQjtBQUNBUCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWXhCLGlCQUFaO0FBQ0EsTUFBTStCLFFBQVEsR0FBRyw4QkFBakI7QUFDQSxNQUFNQyxVQUFVLEdBQUdQLGVBQWUsRUFBbEM7O0FBQ0EsTUFBSU8sVUFBSixFQUFnQjtBQUNkVCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsNEJBQWdDTyxRQUFoQztBQUNEO0FBQ0YsQ0FSRDs7ZUFVZUQsSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZWFkbGluZVN5bmMgZnJvbSAncmVhZGxpbmUtc3luYyc7XG5pbXBvcnQgeyBzYWx1dGVVc2VyLCBnZXRVc2VyTmFtZSB9IGZyb20gJy4vYnJhaW4tZ2FtZXMnO1xuXG5jb25zdCBSVUxFU19ERVNDUklQVElPTiA9ICdXaGF0IGlzIHRoZSByZXN1bHQgb2YgdGhlIGV4cHJlc3Npb24/JztcbmNvbnN0IE9QRVJBVElPTlNfT0ZfUVVFU1RJT04gPSBbJysnLCAnLScsICcqJ107XG5cbmNvbnN0IGdldFJhbmRvbU51bWJlciA9IChtaW4sIG1heCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbmNvbnN0IGdldFJhbmRvbUl0ZW1Gcm9tQXJyYXkgPSAoYXJyYXkpID0+IGFycmF5W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFycmF5Lmxlbmd0aCldO1xuXG5jb25zdCBhc2tRdWVzdGlvbiA9ICgpID0+IHtcbiAgY29uc3QgbnVtYmVyMSA9IGdldFJhbmRvbU51bWJlcigxLCAxMCk7XG4gIGNvbnN0IG51bWJlcjIgPSBnZXRSYW5kb21OdW1iZXIoMSwgMTApO1xuICBjb25zdCBvcGVyYXRpb25PZlF1ZXN0aW9uID0gZ2V0UmFuZG9tSXRlbUZyb21BcnJheShPUEVSQVRJT05TX09GX1FVRVNUSU9OKTtcblxuICBsZXQgY29ycmVjdEFuc3dlcjtcbiAgaWYgKG9wZXJhdGlvbk9mUXVlc3Rpb24gPT09ICcrJykge1xuICAgIGNvcnJlY3RBbnN3ZXIgPSBudW1iZXIxICsgbnVtYmVyMjtcbiAgfSBlbHNlIGlmIChvcGVyYXRpb25PZlF1ZXN0aW9uID09PSAnLScpIHtcbiAgICBjb3JyZWN0QW5zd2VyID0gbnVtYmVyMSAtIG51bWJlcjI7XG4gIH0gZWxzZSBpZiAob3BlcmF0aW9uT2ZRdWVzdGlvbiA9PT0gJyonKSB7XG4gICAgY29ycmVjdEFuc3dlciA9IG51bWJlcjEgKiBudW1iZXIyO1xuICB9XG5cbiAgY29uc3QgdXNlckFuc3dlciA9IHBhcnNlSW50KHJlYWRsaW5lU3luYy5xdWVzdGlvbihgUXVlc3Rpb246ICR7bnVtYmVyMX0gJHtvcGVyYXRpb25PZlF1ZXN0aW9ufSAke251bWJlcjJ9IGApLCAxMCk7XG4gIGNvbnN0IGlzVXNlclJpZ2h0ID0gY29ycmVjdEFuc3dlciA9PT0gdXNlckFuc3dlcjtcbiAgY29uc3QgcG9pbnRGb3JRdWVzdGlvbiA9IGlzVXNlclJpZ2h0ID8gMSA6IE5hTjtcblxuICBpZiAoaXNVc2VyUmlnaHQpIHtcbiAgICBjb25zb2xlLmxvZygnQ29ycmVjdCEnKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhgJHt1c2VyQW5zd2VyfSBpcyB3cm9uZyBhbnN3ZXIgOyguIENvcnJlY3QgYW5zd2VyIHdhcyAke2NvcnJlY3RBbnN3ZXJ9LmApO1xuICB9XG4gIHJldHVybiBwb2ludEZvclF1ZXN0aW9uO1xufTtcblxuY29uc3QgZ2V0UmVzdWx0T2ZHYW1lID0gKCkgPT4ge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgaXNHYW1lQ29udGludWUgPSB0cnVlO1xuXG4gIHdoaWxlIChpc0dhbWVDb250aW51ZSkge1xuICAgIGNvdW50ICs9IGFza1F1ZXN0aW9uKCk7XG4gICAgaXNHYW1lQ29udGludWUgPSBjb3VudCA8IDMgJiYgIU51bWJlci5pc05hTihjb3VudCk7XG4gIH1cblxuICByZXR1cm4gY291bnQgPT09IDM7XG59O1xuXG5jb25zdCBwbGF5ID0gKCkgPT4ge1xuICBzYWx1dGVVc2VyKCk7XG4gIGNvbnNvbGUubG9nKFJVTEVTX0RFU0NSSVBUSU9OKTtcbiAgY29uc3QgdXNlck5hbWUgPSBnZXRVc2VyTmFtZSgpO1xuICBjb25zdCBnYW1lUmVzdWx0ID0gZ2V0UmVzdWx0T2ZHYW1lKCk7XG4gIGlmIChnYW1lUmVzdWx0KSB7XG4gICAgY29uc29sZS5sb2coYENvbmdyYXR1bGF0aW9ucywgJHt1c2VyTmFtZX0hYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXk7XG4iXX0=